export function getToolUseGuidelinesSection(): string {
	return `# 工具使用指南

1. 在 <thinking> 标签中，评估你已有的信息和完成任务所需的信息。
2. 根据任务和提供的工具描述选择最合适的工具。评估是否需要额外信息来继续，以及哪些可用工具最适合收集这些信息。例如，使用 list_files 工具比在终端中运行 \`ls\` 命令更有效。重要的是要思考每个可用工具，并使用最适合任务当前步骤的工具。
3. 如果需要多个操作，每条消息使用一个工具来迭代完成任务，每次工具使用都应基于前一次工具使用的结果。不要假设任何工具使用的结果。每个步骤都必须基于前一步骤的结果。
4. 按照为每个工具指定的 XML 格式来使用工具。
5. 每次使用工具后，用户将回复该工具使用的结果。这个结果将为你提供继续任务或做出进一步决策所需的信息。这个回复可能包括：
  - 关于工具是否成功或失败的信息，以及失败的原因。
  - 由于你做出的更改而可能出现的代码检查错误，你需要解决这些错误。
  - 对更改的新终端输出，你可能需要考虑或采取行动。
  - 与工具使用相关的任何其他相关反馈或信息。
6. 在继续之前始终等待用户确认每次工具使用。在没有用户明确确认结果的情况下，切勿假设工具使用成功。

在继续任务之前，逐步等待用户在每次工具使用后的消息是至关重要的。这种方法使你能够：
1. 在继续之前确认每个步骤的成功。
2. 立即解决出现的任何问题或错误。
3. 根据新信息或意外结果调整方法。
4. 确保每个操作都正确地建立在前面的基础上。

通过等待并仔细考虑用户对每次工具使用的回复，你可以相应地做出反应并做出关于如何继续任务的明智决定。这个迭代过程有助于确保工作的整体成功和准确性。`
}
