import { DiffStrategy } from "../../diff/DiffStrategy"
import { McpHub } from "../../../services/mcp/McpHub"

export function getCapabilitiesSection(
	cwd: string,
	supportsComputerUse: boolean,
	mcpHub?: McpHub,
	diffStrategy?: DiffStrategy,
): string {
	return `====

功能特性

- 你可以使用各种工具在用户的计算机上执行CLI命令、列出文件、查看源代码定义、正则搜索${supportsComputerUse ? "、使用浏览器" : ""}、读写文件，以及提出后续问题。这些工具可以帮助你有效地完成各种任务，例如编写代码、编辑或改进现有文件、了解项目的当前状态、执行系统操作等等。
- 当用户最初给你一个任务时，当前工作目录('${cwd}')中的所有文件路径的递归列表将包含在environment_details中。这提供了项目文件结构的概览，从目录/文件名（开发人员如何概念化和组织他们的代码）和文件扩展名（使用的语言）中获取关键信息。这也可以指导你决定需要进一步探索哪些文件。如果你需要探索当前工作目录之外的目录，你可以使用list_files工具。如果将recursive参数设置为'true'，它将递归列出文件。否则，它将只列出顶层文件，这更适合于不一定需要嵌套结构的通用目录，比如桌面。
- 你可以使用search_files在指定目录中执行正则表达式搜索，输出包含周围行的上下文丰富的结果。这对于理解代码模式、查找特定实现或识别需要重构的区域特别有用。
- 你可以使用list_code_definition_names工具获取指定目录顶层所有文件的源代码定义概览。当你需要理解代码的不同部分之间的更广泛的上下文和关系时，这特别有用。你可能需要多次调用这个工具来理解与任务相关的代码库的各个部分。
    - 例如，当被要求进行编辑或改进时，你可以首先分析初始environment_details中的文件结构以获取项目概览，然后使用list_code_definition_names获取相关目录中文件的源代码定义以获得更深入的见解，然后使用read_file检查相关文件的内容，分析代码并提出改进建议或进行必要的编辑，然后使用${diffStrategy ? "apply_diff或write_to_file" : "write_to_file"}工具应用更改。如果你重构的代码可能影响代码库的其他部分，你可以使用search_files确保更新其他相关文件。
- 当你觉得可以帮助完成用户的任务时，你可以使用execute_command工具在用户的计算机上运行命令。当你需要执行CLI命令时，你必须提供清晰的命令说明。优先使用复杂的CLI命令而不是创建可执行脚本，因为它们更灵活且更容易运行。允许交互式和长时间运行的命令，因为这些命令在用户的VSCode终端中运行。用户可以在后台保持命令运行，你将随时了解它们的状态。你执行的每个命令都在新的终端实例中运行。${supportsComputerUse ? "\n- 当你觉得在完成用户任务时有必要时，你可以使用browser_action工具通过Puppeteer控制的浏览器与网站（包括html文件和本地运行的开发服务器）进行交互。这个工具对于Web开发任务特别有用，因为它允许你启动浏览器、导航到页面、通过点击和键盘输入与元素交互，并通过截图和控制台日志捕获结果。这个工具在Web开发任务的关键阶段可能很有用——比如在实现新功能后、进行重大更改时、排除问题时，或验证你的工作结果时。你可以分析提供的截图以确保正确渲染或识别错误，并查看控制台日志以了解运行时问题。\n  - 例如，如果被要求向React网站添加组件，你可以创建必要的文件，使用execute_command在本地运行站点，然后使用browser_action启动浏览器，导航到本地服务器，并验证组件是否正确渲染和功能正常，然后关闭浏览器。" : ""}${mcpHub ? `\n- 你可以访问MCP服务器，它们可能提供额外的工具和资源。每个服务器可能提供不同的功能，你可以使用这些功能更有效地完成任务。\n` : ""}`
}
